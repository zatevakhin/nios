#-*- coding: utf-8 -*-

import logging
import socket
from copy import copy
from functools import reduce

import requests

from nios.core.auxiliary import exception
from nios.core.CNiosCore import CNiosCore
from nios.core.data import CTask, CTcpConnectResult, ETaskPriority, ETaskType
from nios.core.plugins.CPluginBase import CPluginBase


SERVICE_VENDOR = "asus"
SERVICE_TYPE = "router"
ACTION_CLASS = "vulnerability-check"


class CAsus(CPluginBase):

    mName = f'{SERVICE_VENDOR}-service'
    mTags = {SERVICE_TYPE, ACTION_CLASS, SERVICE_VENDOR}

    def __init__(self, core: CNiosCore):
        self.mCore = core

    def __call__(self, task: CTask):
        result: CTcpConnectResult = task.data.get("tcp")

        exploits: list = []
        exploits.append(copy(self.mCore.mExploits.get("CVE-2011-4497")))
        exploits.append(copy(self.mCore.mExploits.get("CVE-2013-3610")))
        exploits.append(copy(self.mCore.mExploits.get("CVE-2015-1437")))

        results = map(lambda exploit: exploit(result.ip, result.port), exploits)

        items = filter(lambda result: result is not None, results)
        exploited = reduce(lambda accumulator, dx: {**accumulator, **dx}, items)
        task.data.update({"exploit": exploited})

        return task

    def onComplete(self, result):
        result.priority = ETaskPriority.HIGH
        result.type = ETaskType.WORK_FINISHED
        self.mCore.put(result)

    def onError(self, error):
        logging.exception(error)
